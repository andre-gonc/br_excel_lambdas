=LAMBDA(grid_map, start_ref, end_ref, diagonal,
    LET(
        num_rows, ROWS(grid_map),
        num_cols, COLUMNS(grid_map),
        cel_start, INDIRECT(TEXTBEFORE(CELL("address", grid_map), "$") & start_ref),
        cel_end, INDIRECT(TEXTBEFORE(CELL("address", grid_map), "$") & end_ref),
        s_row_rel, ROW(cel_start) - @ROW(grid_map) + 1,
        s_col_rel, COLUMN(cel_start) - @COLUMN(grid_map) + 1,
        e_row_rel, ROW(cel_end) - @ROW(grid_map) + 1,
        e_col_rel, COLUMN(cel_end) - @COLUMN(grid_map) + 1,
        d_row, IF(diagonal, {-1; -1; -1; 0; 0; 1; 1; 1}, {-1; 0; 0; 1}),
        d_col, IF(diagonal, {-1; 0; 1; -1; 1; -1; 0; 1}, {0; -1; 1; 0}),
        _collection, LAMBDA(self, arr,
            LAMBDA(r, c, [v], IF(ISOMITTED(v), INDEX(arr, r, c), self(self, IF((SEQUENCE(num_rows) = r) * (SEQUENCE(, num_cols) = c), v, arr))))
        ),
        BFS_RECURSIVE, LAMBDA(self, array_dist, queue,
            LET(
                row_curr, INDEX(queue, 1, 1),
                col_curr, INDEX(queue, 1, 2),
                dist_curr, INDEX(queue, 1, 3),
                neighbors, REDUCE(
                    VSTACK(_collection(_collection, array_dist), LAMBDA(queue)),
                    SEQUENCE(ROWS(d_row)),
                    LAMBDA(a, i,
                        LET(
                            row_next, row_curr + INDEX(d_row, i, 1),
                            col_next, col_curr + INDEX(d_col, i, 1),
                            IF(
                                IFERROR(AND(INDEX(grid_map, row_next, col_next) = cel_start, INDEX(a, 1, 1)(row_next, col_next) = 0), 0),
                                VSTACK(
                                    INDEX(a, 1, 1)(row_next, col_next, dist_curr + 1),
                                    LAMBDA(VSTACK(INDEX(a, 2, 1)(), HSTACK(row_next, col_next, dist_curr + 1)))
                                ),
                                a
                            )
                        )
                    )
                ),
                new_queue, INDEX(neighbors, 2, 1)(),
                IF(
                    AND(row_curr = e_row_rel, col_curr = e_col_rel),
                    dist_curr - 1,
                    IFS(ROWS(new_queue) > 1, self(self, INDEX(neighbors, 1, 1)(0, 0), DROP(new_queue, 1)))
                )
            )
        ),
        initial_dist, IF((SEQUENCE(num_rows) = s_row_rel) * (SEQUENCE(, num_cols) = s_col_rel), 1, 0),
        initial_queue, HSTACK(s_row_rel, s_col_rel, 1),
        result, BFS_RECURSIVE(BFS_RECURSIVE, initial_dist, initial_queue),
        result
    )
)
