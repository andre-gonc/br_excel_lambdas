//Default pointing used in all lambdas
Standard_arrows = {"↖"; "↑"; "↗"; "←"; "→"; "↙"; "↓"; "↘"};

//Extracts the line number from an address
_ROW = LAMBDA(address, --REGEXEXTRACT(TOCOL(address), "\d+"));

//Extracts the column number from an address
_COL = LAMBDA(address,
    MAP(
        address,
        LAMBDA(add,
            LET(
                str, REGEXEXTRACT(add, "\pL", 1),
                SERIESSUM(26, COLUMNS(str) - 1, -1, CODE(str) - 64)
            )
        )
    )
);

//Does the same as the OFFSET function from an address, without needing a range
_OFFSET_INDIRECT = LAMBDA(txtRef, [rows], [cols], [radius], [no_diagonal],
    LET(
        row_ref, _ROW(txtRef),
        col_ref, _COL(txtRef),
        offst, IF(ISOMITTED(radius), 0, SEQUENCE(2 * radius + 1, , -radius)),
        new_row, offst + row_ref + rows,
        new_col, offst + col_ref + cols,
        IFS(
            ISOMITTED(radius),
            ADDRESS(new_row, new_col, 4),
            ISOMITTED(no_diagonal),
            TOCOL(ADDRESS(new_row, TOROW(new_col), 4), 2),
            1,
            UNIQUE(VSTACK(ADDRESS(new_row, col_ref, 4), ADDRESS(row_ref, new_col, 4)))
        )
    )
);

//Moves a cell based on the direction pointed by Standard_arrows (this lambda is the basis for the other arrow displacement lambdas)
_MOVE = LAMBDA(textRef, arrow, [nTimes],
    LET(
        address, SCAN(
            textRef,
            SEQUENCE(IF(ISOMITTED(nTimes), 1, nTimes)),
            LAMBDA(a, _,
                LET(
                    index, XMATCH(arrow, Standard_arrows),
                    column, _COL(a) + CHOOSE(index, -1, 0, 1, -1, 1, -1, 0, 1),
                    row, _ROW(a) + CHOOSE(index, -1, -1, -1, 0, 0, 1, 1, 1),
                    ADDRESS(row, column, 4)
                )
            )
        ),
        IF(ISOMITTED(nTimes), address, VSTACK(textRef, address))
    )
);

//Moves sequentially through a map based on a chain of consecutive arrows, if collection_map is specified the number of objects collected along the way will be counted
_SEQUENTIAL_MOVE = LAMBDA(textRef, arrows, [collection_map], [group],
    LET(
        address, SCAN(textRef, REGEXEXTRACT(arrows, TEXTJOIN("|", , Standard_arrows), 1), _MOVE),
        IF(
            ISOMITTED(collection_map),
            address,
            LET(
                start_row, @ROW(collection_map) - 1,
                start_col, @COLUMN(collection_map) - 1,
                collections, INDEX(
                    collection_map,
                    _ROW(address) - start_row,
                    _COL(address) - start_col
                ),
                IF(
                    ISOMITTED(group),
                    HSTACK(address, collections),
                    GROUPBY(collections, collections, COUNTA, , , -2)
                )
            )
        )
    )
);

//Travels a path formed by arrows nTimes times
ARROW_PATH = LAMBDA(textRef, nTimes,
    VSTACK(
        textRef,
        SCAN(textRef, SEQUENCE(nTimes), LAMBDA(a, v, IFERROR(_MOVE(a, INDIRECT(a)), a)))
    )
);

//intermediate lambda to stack results during iterations in other lambdas
_STACK = LAMBDA(arr,
    LAMBDA([x], [y], [v],
        IFS(
            ISOMITTED(x),
            arr,
            ISOMITTED(y),
            XLOOKUP(CONCAT(x & "-"), BYROW(TAKE(arr, , 2) & "-", CONCAT), DROP(arr, , 2)),
            ISOMITTED(v),
            XLOOKUP(x & "-" & y & "-", BYROW(TAKE(arr, , 2) & "-", CONCAT), DROP(arr, , 2)),
            1,
            _STACK(VSTACK(arr, HSTACK(x, y, v)))
        )
    )
);

//Returns the distance between a starting address and an ending address, color_map must be filled with any content that differentiates colors (color index, color name, RGB, etc.)
_DISTANCE = LAMBDA(start_ref, end_ref, diagonal, [color_map], [obstacles], [obstacle_map],
    IF(
        ISOMITTED(color_map),
        LET(
            dr, ABS(_ROW(start_ref) - _ROW(end_ref)),
            dc, ABS(_COL(start_ref) - _COL(end_ref)),
            IF(diagonal, MAX(dr, dc), dr + dc)
        ),
        LET(
            n_rows, ROWS(color_map),
            n_cols, COLUMNS(color_map),
            row_adjust, @ROW(color_map) - 1,
            col_adjust, @COLUMN(color_map) - 1,
            relative_start_row, _ROW(start_ref) - row_adjust,
            relative_start_col, _COL(start_ref) - col_adjust,
            target, +INDEX(color_map, relative_start_row, relative_start_col),
            relative_end_row, _ROW(end_ref) - row_adjust,
            relative_end_col, _COL(end_ref) - col_adjust,
            d_row, IF(diagonal, {-1; -1; -1; 0; 0; 1; 1; 1}, {-1; 0; 0; 1}),
            d_col, IF(diagonal, {-1; 0; 1; -1; 1; -1; 0; 1}, {0; -1; 1; 0}),
            RECURSIVE_BFS, LAMBDA(self, distance_stack, queue,
                LET(
                    row_curr, INDEX(queue, 1, 1),
                    col_curr, INDEX(queue, 1, 2),
                    dist_curr, INDEX(queue, 1, 3),
                    neighbors, REDUCE(
                        VSTACK(_STACK(distance_stack), LAMBDA(queue)),
                        SEQUENCE(ROWS(d_row)),
                        LAMBDA(a, i,
                            LET(
                                next_row, row_curr + INDEX(d_row, i, 1),
                                next_col, col_curr + INDEX(d_col, i, 1),
                                IF(
                                    IFERROR(
                                        AND(
                                            INDEX(color_map, next_row, next_col) = target,
                                            ISNA(INDEX(a, 1, 1)(next_row, next_col))
                                        ),
                                        0
                                    ),
                                    VSTACK(
                                        INDEX(a, 1, 1)(next_row, next_col, dist_curr + 1),
                                        LAMBDA(
                                            VSTACK(
                                                INDEX(a, 2, 1)(),
                                                HSTACK(next_row, next_col, dist_curr + 1)
                                            )
                                        )
                                    ),
                                    a
                                )
                            )
                        )
                    ),
                    new_queue, INDEX(neighbors, 2, 1)(),
                    IF(
                        AND(row_curr = relative_end_row, col_curr = relative_end_col),
                        dist_curr - 1,
                        IFS(
                            ROWS(new_queue) > 1,
                            self(self, INDEX(neighbors, 1, 1)(), DROP(new_queue, 1))
                        )
                    )
                )
            ),
            start_queue, HSTACK(relative_start_row, relative_start_col, 1),
            result, RECURSIVE_BFS(RECURSIVE_BFS, start_queue, start_queue),
            result
        )
    )
);

//Travels a path of the same color on a map counting how many items are collected along the way. If group is omitted, a list with addresses of all cells traveled and the items collected in each one will be returned. This lambda uses two maps as input: color_map with the identification of the colors and collect_map with the items to be collected.
_COLLECT = LAMBDA(start_ref, end_ref, diagonal, color_map, collect_map, [group],
    LET(
        n_rows, ROWS(color_map),
        n_cols, COLUMNS(color_map),
        row_adjust, IFERROR(@ROW(color_map) - 1, @ROW(collect_map) - 1),
        col_adjust, IFERROR(@COLUMN(color_map) - 1, @COLUMN(collect_map) - 1),
        relative_start_row, _ROW(start_ref) - row_adjust,
        relative_start_col, _COL(start_ref) - col_adjust,
        target, INDEX(color_map, relative_start_row, relative_start_col),
        relative_end_row, _ROW(end_ref) - row_adjust,
        relative_end_col, _COL(end_ref) - col_adjust,
        d_row, IF(diagonal, {-1; -1; -1; 0; 0; 1; 1; 1}, {-1; 0; 0; 1}),
        d_col, IF(diagonal, {-1; 0; 1; -1; 1; -1; 0; 1}, {0; -1; 1; 0}),
        RECURSIVE_BFS, LAMBDA(self, distance_stack, queue,
            LET(
                curr_row, INDEX(queue, 1, 1),
                curr_col, INDEX(queue, 1, 2),
                neighbors, REDUCE(
                    VSTACK(_STACK(distance_stack), LAMBDA(queue)),
                    SEQUENCE(ROWS(d_row)),
                    LAMBDA(a, i,
                        LET(
                            next_row, curr_row + INDEX(d_row, i, 1),
                            next_col, curr_col + INDEX(d_col, i, 1),
                            IF(
                                IFERROR(
                                    AND(
                                        INDEX(color_map, next_row, next_col) = target,
                                        ISNA(INDEX(a, 1, 1)(next_row, next_col))
                                    ),
                                    0
                                ),
                                VSTACK(
                                    INDEX(a, 1, 1)(next_row, next_col, HSTACK(curr_row, curr_col)),
                                    LAMBDA(VSTACK(INDEX(a, 2, 1)(), HSTACK(next_row, next_col)))
                                ),
                                a
                            )
                        )
                    )
                ),
                new_queue, INDEX(neighbors, 2, 1)(),
                parents, INDEX(neighbors, 1, 1),
                rebuild, LAMBDA(fx, ref,
                    IF(
                        AND(parents(ref) = HSTACK(relative_start_row, relative_start_col)),
                        parents(ref),
                        VSTACK(fx(fx, parents(ref)), parents(ref))
                    )
                ),
                IF(
                    AND(curr_row = relative_end_row, curr_col = relative_end_col),
                    rebuild(rebuild, HSTACK(relative_end_row, relative_end_col)),
                    IFS(ROWS(new_queue) > 1, self(self, parents(), DROP(new_queue, 1)))
                )
            )
        ),
        start_parents, HSTACK(relative_start_row, relative_start_col, 0, 0),
        start_queue, HSTACK(relative_start_row, relative_start_col),
        result, RECURSIVE_BFS(RECURSIVE_BFS, start_parents, start_queue),
        collected, INDEX(collect_map, INDEX(result, , 1), INDEX(result, , 2)),
        addresses, ADDRESS(INDEX(result, , 1) + row_adjust, INDEX(result, , 2) + col_adjust, 4),
        IF(
            ISOMITTED(group),
            HSTACK(addresses, collected),
            GROUPBY(collected, collected, COUNTA, 0, , -2)
        )
    )
);
